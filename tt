#!/usr/bin/env python
'''
Timelapse Tools
http://github.com/gak/timelapse-tools
'''

import os
import re
import sys
import math
import argparse
from glob import glob


class TimelapseTools:

    def __init__(self):
        pass

    @staticmethod
    def ffmpeg_split(src, fps, dst):
        cmd = 'ffmpeg -i "{}" -r {} -f image2 "{}"' \
            .format(src, fps, dst)
        print(cmd)
        os.system(cmd)

    @staticmethod
    def ffmpeg_join(files, output):
        cmd = 'ffmpeg -i "{}" -vcodec libx264 -vpre slow -crf 20 -threads 0 "{}"' \
            .format(files, output)
        print(cmd)
        os.system(cmd)

    @staticmethod
    def natural(s):
        k = re.split('([0-9]*)', s)
        if len(k) == 3:
            k[1] = int(k[1])
        return k

    @staticmethod
    def split(args):

        assert(args.src)
        assert(args.dst)
        assert(args.fps)

        args.src = os.path.expanduser(args.src)
        args.dst = os.path.expanduser(args.dst)

        if os.path.isdir(args.src):
            files = glob(os.path.join(args.src, '*'))
        else:
            files = glob(args.src)

        files.sort(key=TimelapseTools.natural)

        n = 0

        if not os.path.exists(args.dst):
            os.mkdir(args.dst)

        for file in files:
            if not os.path.isfile(file):
                print('{} is not a file'.format(file))
                continue

            # Spit out the frames
            d = 'tmp'
            if not os.path.existS(d):
                os.mkdir(d)
            out = os.path.join(d, '%05d.png')
            TimelapseTools.ffmpeg_split(src=file, fps=args.fps, dst=out)

            # Collect the frames and move them to the correct place
            for frame_name in glob(os.path.join(d, '*png')):
                n += 1
                new_frame_name = os.path.join(args.dst, '%05i.png' % n)
                os.rename(frame_name, new_frame_name)

    @staticmethod
    def squash(args):

        assert(args.src)
        assert(not args.dst)
        assert(not args.fps)

        n = 0

        files = glob(os.path.join(args.src, '*'))
        files.sort(key=TimelapseTools.natural)

        for file in files:
            ext = os.path.splitext(file)[1]
            n += 1
            new_frame_name = os.path.join(args.src, '%05i%s' % (n, ext))

            print(file, '->', new_frame_name)
            os.rename(file, new_frame_name)

    @staticmethod
    def join(args):

        assert(args.src)
        assert(args.dst)

        TimelapseTools.ffmpeg_join(os.path.join(args.src, '%05d.png'), args.dst)

    @staticmethod
    def remove_frames(args):

        files = glob(os.path.join(args.src, '*'))
        files.sort(key=TimelapseTools.natural)
        current_frames = len(files)

        print('current frames', current_frames)
        target_frames = int(args.target_frames)
        print('target frames', target_frames)

        to_remove = current_frames - target_frames
        remove_every = math.floor(float(current_frames) / to_remove)

        print('will remove', to_remove, 'images')
        print('will remove every', remove_every, 'images')
        input('Hit control-c to cancel, or enter to continue: ')

        for n, frame_name in enumerate(files):
            if n % remove_every:
                continue
            print('Removing', frame_name)
            os.unlink(frame_name)


def parser():
    p = argparse.ArgumentParser()
    p.add_argument('command', metavar='CMD')
    p.add_argument('--src', metavar='SRC')
    p.add_argument('--dst', metavar='DST')
    p.add_argument('--fps', metavar='FPS')
    p.add_argument('--target-frames', metavar='FRAMES')
    return p.parse_args()


def check_ffmpeg():
    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    for path in os.environ['PATH'].split(os.pathsep):
        e = os.path.join(path, 'ffmpeg')

        if is_exe(e):
            return True

    return False


def main():
    if not check_ffmpeg():
        print 'ffmpeg executable not found.'

        sys.exit(1)

    args = parser()
    func = getattr(TimelapseTools, args.command)
    func(args)

if __name__ == '__main__':
    main()
